""""–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏,
    —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
üìå –ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.
–í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ
üìå –í–æ–∑—å–º–∏—Ç–µ –ª—é–±—ã–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∫ –Ω–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
import argparse
from datetime import datetime, date, time, timedelta
import logging


def logging_writer(func):
    def wrapper(*args, **kwargs):
        logging.basicConfig(filename='project.log.', filemode='w', encoding='utf-8', level=logging.INFO)
        logger = logging.getLogger()
        logger.info(f'\ntime - {datetime.now()}\narguments - {args, kwargs}\nname function - {func.__name__}\n'
                    f'result - {func(*args, **kwargs)}')

    return wrapper


@logging_writer
def convert_date(text: str) -> date:
    parse_text = text.split()
    year = datetime.now().year
    logging.basicConfig(filename='task1.log.', filemode='a', encoding='utf-8', level=logging.INFO)
    logger = logging.getLogger()
    list_str_month = ['—è–Ω–≤–∞—Ä—è', "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è",
                      "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    list_int_month = [i for i in range(1, 13)]
    try:
        if parse_text[-1] in list_str_month:
            month = list_str_month.index(parse_text[-1]) + 1
        elif int(parse_text[-1]) in list_int_month:
            month = int(parse_text[-1])
        else:
            month = datetime.now().month
    except ValueError:
        logger.error('–Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –º–µ—Å—è—Ü')
    list_str_weeks = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    list_int_weeks = [i for i in range(1, 8)]
    try:
        if parse_text[-2] in list_str_weeks:
            week = list_str_weeks.index(parse_text[-2])
        elif int(parse_text[-2]) in list_int_weeks:
            week = int(parse_text[-2])
        else:
            week = datetime.now().weekday()
    except ValueError:
        logger.error('–Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
    days = timedelta(weeks=float(parse_text[0].split('-')[0]) - 1)
    result = date(year, month, day=1)
    while True:
        if week != result.weekday():
            result += timedelta(days=1)
            continue
        break
    result += days
    return result


@logging_writer
def triangle(a: int, b: int, c: int):
    if a == b == c:
        return '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π'
    elif a == b or b == c or a == c:
        return "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π"
    else:
        return "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π"


def fibonacci(num):
    if num == 0:
        return 0
    elif num == 1:
        return 1
    return fibonacci(num - 1) + fibonacci(num - 2)


@logging_writer
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('numbers', metavar='N', type=str, nargs='*')
    args = parser.parse_args()
    args_func = ' '.join(list(map(str, args.numbers)))
    if args_func:
        print(convert_date(args_func))  # –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
    else:
        print(convert_date('2-–æ–π –≤—Ç–æ—Ä–Ω–∏–∫ —è–Ω–≤–∞—Ä—è'))  # –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ main
    triangle(1, 2, 3)
    print(fibonacci(10))


if __name__ == '__main__':
    main()
