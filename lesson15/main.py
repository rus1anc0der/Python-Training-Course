"""üìå –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å logging –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–∏ÃÜ–ª.
üìå –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å."""
import argparse
from datetime import datetime, date, time, timedelta
import logging


def func1(val):
    logging.basicConfig(filename='project.log.', filemode='w', encoding='utf-8', level=logging.INFO)
    logger = logging.getLogger('start')
    try:
        return 100 / val
    except ValueError:
        logger.warning('ValueError')
    except ZeroDivisionError:
        logger.warning('ZeroDivisionError')


"""üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–∏ÃÜ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä. 
    –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ–µÃà —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–∏ÃÜ–ª.
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–∏ÃÜ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –º–æ–¥—É–ª—å logging.

üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
üìå –°–æ—Ö—Ä–∞–Ω—è–∏ÃÜ—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–∏ÃÜ–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""


def func2(func):
    def wrapper(*args, **kwargs):
        logging.basicConfig(filename='project.log.', filemode='w', encoding='utf-8', level=logging.INFO)
        logger = logging.getLogger('start')
        logger.info(f'\ntime - {datetime.now()}\narguments - {args, kwargs}\nname function - {func.__name__}\n'
                    f'result - {func(*args, **kwargs)}')

    return wrapper


@func2
def func3(val):
    return [i for i in range(val)]


"""üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–∏ÃÜ —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3- —è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–∏ÃÜ—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
üìå –õ–æ–≥–∏—Ä—É–∏ÃÜ—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏.
üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä–µÃà—Ç—Å—è –ø–µ—Ä–≤—ã–∏ÃÜ –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏,
    —Ç–µ–∫—É—â–∏–∏ÃÜ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–∏ÃÜ –º–µ—Å—è—Ü.
üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ,
—Ç.–µ –Ω–µ –º–∞—è, –∞ 5."""


def func4(text: str) -> date:
    parse_text = text.split()
    year = datetime.now().year
    logging.basicConfig(filename='project.log.', filemode='w', encoding='utf-8', level=logging.INFO)
    logger = logging.getLogger('start')
    list_str_month = ['—è–Ω–≤–∞—Ä—è', "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è",
                      "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    list_int_month = [i for i in range(1, 13)]
    try:
        if parse_text[-1] in list_str_month:
            month = list_str_month.index(parse_text[-1]) + 1
        elif int(parse_text[-1]) in list_int_month:
            month = int(parse_text[-1])
        else:
            month = datetime.now().month
    except ValueError:
        logger.error('–Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –º–µ—Å—è—Ü')
    list_str_weeks = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    list_int_weeks = [i for i in range(1, 8)]
    try:
        if parse_text[-2] in list_str_weeks:
            week = list_str_weeks.index(parse_text[-2])
        elif int(parse_text[-2]) in list_int_weeks:
            week = int(parse_text[-2])
        else:
            week = datetime.now().weekday()
    except ValueError:
        logger.error('–Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
    days = timedelta(weeks=float(parse_text[0].split('-')[0]) - 1)
    result = date(year, month, day=1)
    while True:
        if week != result.weekday():
            result += timedelta(days=1)
            continue
        break
    result += days
    return result


def main():
    # print(func1(100))
    # func3(10)
    parser = argparse.ArgumentParser()
    parser.add_argument('numbers', metavar='N', type=str, nargs='*')
    args = parser.parse_args()
    args_func = ' '.join(list(map(str, args.numbers)))
    if args_func:
        print(func4(args_func))  # –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
    else:
        print(func4('2-–æ–π –≤—Ç–æ—Ä–Ω–∏–∫ —è–Ω–≤–∞—Ä—è'))


if __name__ == '__main__':
    main()
