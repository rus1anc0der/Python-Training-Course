"""üìå –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É 3 –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞. –ú—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–∏ÃÜ —Ñ–∞–∏ÃÜ–ª —Å –ø—Å–µ–≤–¥–æ –∏–º–µ–Ω–∞–º–∏ –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —á–∏—Å–µ–ª.
üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µÃà—Ç –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —Ñ–∞–∏ÃÜ–ª–∞ –Ω–æ–≤—ã–∏ÃÜ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
üìå –ò–º–µ–Ω–∞ –ø–∏—à–∏—Ç–µ —Å –±–æ–ª—å—à–æ–∏ÃÜ –±—É–∫–≤—ã.
üìå –ö–∞–∂–¥—É—é –ø–∞—Ä—É —Å–æ—Ö—Ä–∞–Ω—è–∏ÃÜ—Ç–µ —Å –Ω–æ–≤–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏."""
import json
import csv
import pickle
from pathlib import Path


def write_text_JSON():
    list_name: list = []
    list_numbers: list = []
    with (open("/Users/ruslanrustamov/Documents/–£—á–µ–±–∞/Python/–î–ó –ø–æ –∫—É—Ä—Å—É Python/lesson7/create_name_number.txt",
               "r", encoding='utf-8') as cnn,
          open("name_number.JSON", 'w') as nnJSON):
        for i in cnn:
            for j in i.split('\n')[0].split('-'):
                if j.isalpha():
                    list_name.append(j)
                else:
                    list_numbers.append(j)
        name_number_JSON: dict = {}
        for name, number in zip(list_name, list_numbers):
            name_number_JSON[name.capitalize()] = number
        json.dump(name_number_JSON, nnJSON, indent=2)
        print(list_numbers)
        print(list_name)


# write_text_JSON()

"""üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è, –ª–∏—á–Ω—ã–∏ÃÜ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7).
üìå –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–∏ÃÜ—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–∏ÃÜ–ª.
üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞.
üìå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–ª—é—á–µÃà–º –¥–ª—è –∏–º–µ–Ω–∏.
üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
üìå –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–∏ÃÜ–ª –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è."""


def func_JSON():
    with open("func.JSON", 'a', encoding="utf-8") as funcJ:
        dict_lvl_JSON: dict = {}
        res = True
        while res:
            dict_id_JSON: dict = {}
            input_name: str = input("–í–∞—à–µ –∏–º—è -> ")
            if input_name == 'end':
                res = False
                continue
            while True:
                input_id: int = int(input("–õ–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä -> "))
                if input_id in dict_id_JSON.keys():
                    print("–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç , –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π")
                else:
                    break
            while True:
                input_lvl: int = int(input("–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ -> "))
                if 0 > input_lvl > 8:
                    print('–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 7')
                else:
                    break
            dict_id_JSON[input_id] = input_name
            dict_lvl_JSON[input_lvl] = dict_id_JSON
        json.dump(dict_lvl_JSON, funcJ, ensure_ascii=False, indent=2, sort_keys=True)


# func_JSON()

"""üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Ñ–∞–∏ÃÜ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV."""


def func_CSV():
    with (open("func.JSON", 'r', encoding='utf-8') as f,
          open("func_CSV.csv", "w", newline='', encoding='utf-8') as f2):
        write_list: list = []
        json_file = json.load(f)
        print(json_file)
        csv_write = csv.writer(f2, dialect='excel', delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        csv_write.writerow(['Lvl', 'Name', 'ID'])
        for keys, values in json_file.items():
            for key, value in values.items():
                write_list.append([key, value, keys])
        csv_write.writerows(write_list)


# func_CSV()


"""üìå –ü—Ä–æ—á–∏—Ç–∞–∏ÃÜ—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–∏ÃÜ–ª –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ id –¥–æ 10 —Ü–∏—Ñ—Ä –Ω–µ–∑–Ω–∞—á–∞—â–∏–º–∏ –Ω—É–ª—è–º–∏.
üìå –í –∏–º–µ–Ω–∞—Ö –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–¥–µ–ª–∞–∏ÃÜ—Ç–µ –ø—Ä–æ–ø–∏—Å–Ω–æ–∏ÃÜ.
üìå –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.
üìå –ü–æ–ª—É—á–∏–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ json —Ñ–∞–∏ÃÜ–ª, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ csv —Ñ–∞–∏ÃÜ–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–∏ÃÜ json —Å–ª–æ–≤–∞—Ä—å.
üìå –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–≤–∞–∏ÃÜ—Ç–µ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏."""


def csv_to_JSON(csv, JSON):
    with (open(csv, 'r') as csv_read,
          open(JSON, 'w', encoding='utf-8') as JSON_writer):
        dict_json: dict = {}
        for enum, line in enumerate(csv_read):
            dict_csv_line: dict = {}
            line = line.split('\n')[0].split(',')
            print(line)
            if enum != 0:
                dict_csv_line[line[0]] = f"{len(line[1]) + (10_000_000_000 - int(line[2]))}"
                dict_json[enum] = dict_csv_line
        json.dump(dict_json, JSON_writer, ensure_ascii=False, indent=2)


# csv_to_JSON('func_CSV.csv', 'csv_to_JSON.JSON')


"""üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç json —Ñ–∞–∏ÃÜ–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–∏ÃÜ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–∏–º–µÃà–Ω–Ω—ã—Ö 
pickle —Ñ–∞–∏ÃÜ–ª–æ–≤."""


def func_pickle():
    for enum, path_file in enumerate(Path(Path.cwd()).iterdir()):
        *_, file = str(path_file).split('.')
        if file == 'JSON':
            with (open(path_file, 'r') as r_json,
                  open(f'pickle{enum}.pickle', 'wb') as write_pickle):
                pickle.dump(r_json.read(), write_pickle)


# func_pickle()


"""üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç pickle —Ñ–∞–∏ÃÜ–ª —Ö—Ä–∞–Ω—è—â–∏–∏ÃÜ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–∏ÃÜ –≤ —Ç–∞–±–ª–∏—á–Ω—ã–∏ÃÜ csv —Ñ–∞–∏ÃÜ–ª.
üìå –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–æ–∑—å–º–∏—Ç–µ pickle –≤–µ—Ä—Å–∏—é —Ñ–∞–∏ÃÜ–ª–∞ –∏–∑ –∑–∞–¥–∞—á–∏ 4 —ç—Ç–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–∞."""


def pickle_to_csv():
    with (open("pickle5.pickle", 'rb') as rp,
          open('pickle_to_csv.csv', "w", encoding='utf-8') as ptc):
        new_dict: dict = json.loads(pickle.load(rp))
        csv_write = csv.DictWriter(ptc, fieldnames=[str(i) for i in new_dict.keys()], dialect='excel-tab',
                                   quoting=csv.QUOTE_ALL)
        csv_write.writeheader()
        csv_write.writerows([new_dict])


# pickle_to_csv()


"""üìå –ü—Ä–æ—á–∏—Ç–∞–∏ÃÜ—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–∏ÃÜ–ª –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
üìå –†–∞—Å–ø–µ—á–∞—Ç–∞–∏ÃÜ—Ç–µ –µ–≥–æ –∫–∞–∫ pickle —Å—Ç—Ä–æ–∫—É."""

with open("pickle_to_csv.csv", 'r') as p_read:
    for line in p_read:
        print(pickle.dumps(line, protocol=pickle.DEFAULT_PROTOCOL))
