"""
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ.
üìå –ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞–µÃà—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.

üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 1.
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON —Ñ–∞–∏ÃÜ–ª."""
import json
from lesson11 import main


class Factorial:
    _dict_instance = {}
    list_num = []

    def __init__(self, k, path_file):
        self.k = k
        self.path_file = path_file

    def read_instance(self):
        return self._dict_instance

    def _add_to_dict(self, num):
        if num in self._dict_instance:
            return self._dict_instance[num]
        value = 1
        for i in range(1, num + 1):
            value *= i
        self.list_num.append(num)
        self._dict_instance[num] = value
        return value

    def __call__(self, num):
        if len(self._dict_instance) < self.k:
            return self._add_to_dict(num)
        elif len(self._dict_instance) == self.k:
            self._dict_instance.pop(self.list_num[0])
            return self._add_to_dict(num)

    def __enter__(self):
        self.file = open(self.path_file, 'w', encoding='utf-8')
        return self.file

    def __exit__(self, exc_type, exc_val, exc_tb):
        json.dump(self._dict_instance, self.file, indent=2)
        self.file.close()


#
# test1 = Factorial(5, 'Factorial.json')
# print(test1(1))
# print(test1(2))
# print(test1(3))
# print(test1(3))
# print(test1(5))
# print(test1(6))
# print(test1.read_instance())
# with Factorial(4, 'Factorial.json'):
#     print(test1(10))


"""
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
–¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1."""


class GeneratorFactorial:

    def __init__(self, stop, start=1, step=1):
        self.stop = stop
        self.start = start
        self.step = step
        self.first = 1
        self.value = 1

    def __iter__(self):
        return self

    def __next__(self):
        while self.first < self.stop:
            self.value *= self.first
            self.first += 1
            if self.first >= self.start:
                return self.value
        raise StopIteration


# test2 = GeneratorFactorial(11, 5, 2)
# for i in test2:
#     print(i)


"""üìå –î–æ—Ä–∞–±–æ—Ç–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏ –≤—Å—Ç—Ä–æ–∏ÃÜ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ(–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö)
üìå –ò—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–∏ÃÜ—Å—Ç–≤."""
#
# test_rectangle = main.Rectangle(11, 22)
# print(test_rectangle.length)
# print(test_rectangle.width)
# test_rectangle.width = 10
# print(test_rectangle.width)
# test_rectangle.length = -5  # raise ValueError("the values must be greater than 0")
# print(test_rectangle.length)
# test_rectangle.width = -100  # raise ValueError("the values must be greater than 0")
# print(test_rectangle.width)


""" –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ –¥–æ–±–∞–≤–∏–º —ç–∫–æ–Ω–æ–º–∏—é –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–æ–∏ÃÜ—Å—Ç–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–µ–∑ —Å–ª–æ–≤–∞—Ä—è __dict__.
üìå –ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
üìå –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –Ω–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–∏ÃÜ —Ä–∞–∑–º–µ—Ä–∞."""


class Range:

    def __init__(self, min_value: int = None, max_value: int = None):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        return setattr(instance, self.param_name, value)

    def validate(self, value):
        if not isinstance(value, int):
            raise TypeError("The value must be an integer")
        if self.min_value is not None and value < self.min_value:
            raise ValueError(f"The values must be greater than {self.min_value}")
        if self.max_value is not None and value >= self.max_value:
            raise ValueError(f"The values must be less than {self.max_value}")


class Rectangle:
    """Rectangle class. There are methods for comparing and finding the area and perimeter"""
    __slots__ = ('_length', '_width')
    length = Range(1, 10)
    width = Range(1, 10)

    def __init__(self, length, width=None):
        self.length = length
        self.width = width

    def length_rectangle(self):
        return (self.length + self.width) * 2

    def area_rectangle(self):
        return self.length * self.width

    def __add__(self, other):
        a = self.length + other.length
        b = self.width + other.width
        return Rectangle(a, b)

    def __sub__(self, other):
        a = self.length - other.length
        b = self.width - other.width
        if a < 0 or b < 0:
            return f"the operation is not possible"
        return Rectangle(a, b)

    def __eq__(self, other):
        return self.area_rectangle() == other.area_rectangle()

    def __ne__(self, other):
        return self.area_rectangle() != other.area_rectangle()

    def __gt__(self, other):
        return self.area_rectangle() > other.area_rectangle()

    def __ge__(self, other):
        return self.area_rectangle() <= other.area_rectangle()

    def __lt__(self, other):
        return self.area_rectangle() < other.area_rectangle()

    def __le__(self, other):
        return self.area_rectangle() >= other.area_rectangle()

    def __repr__(self):
        return f"Rectangle({self.length}, {self.width})"

    def __str__(self):
        return f"length = {self.length}\nwidth = {self.width}"


rectangle = Rectangle(2, 2)
rectangle.length = 3
print(rectangle)
rectangle2 = Rectangle(2, 2)
# rectangle2.width = 15  #ValueError: The values must be less than 10
print(rectangle2)
