"""✔ Напишите функцию, которая принимает строку текста. Вывести функцией каждое слово с новой строки.
✔ Строки нумеруются начиная с единицы.
✔ Слова выводятся отсортированными согласно кодировки Unicode.
✔ Текст выравнивается по правому краю так, чтобы у самого длинного слова был один пробел между ним и номером строки."""


def print_text(text: str):
    sort: list = sorted(text.split())
    max_len: int = 0
    for i in sort:
        if max_len < len(i):
            max_len = len(i)
    for i, num in enumerate(sort, 1):
        print(f"{i} {num:>{max_len}}")


# print_text("Напишите функцию, которая принимает строку текста")


"""✔ Напишите функцию, которая принимает строку текста.
✔ Сформируйте список с уникальными кодами Unicode каждого символа введённой строки отсортированный по убыванию."""


def print_text2(text: str) -> list:
    lst: list = []
    for i in sorted(text, reverse=True):
        lst.append(ord(i))
    return lst


# print(print_text2("Напишите функцию, которая принимает строку текста"))


"""✔ Функция получает на вход строку из двух чисел через пробел.
✔ Сформируйте словарь, где ключом будет
символ из Unicode, а значением — целое число.
✔ Диапазон пар ключ-значение от наименьшего из введённых пользователем чисел до наибольшего включительно."""


def my_func(text: str) -> dict:
    res: dict = {}
    for i in text.split():
        res[chr(int(i))] = int(i)
    return res


# print(my_func("99 112"))

"""✔ Функция получает на вход список чисел.
✔ Отсортируйте его элементы in place без использования
встроенных в язык сортировок.
✔ Как вариант напишите сортировку пузырьком. Её описание есть в википедии."""


def my_func2(lst: list[int]) -> list:
    for i in range(len(lst) - 1):
        for j in range(len(lst) - i - 1):
            if lst[j] > lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    return lst


# print(my_func2([9, 4, 1, 2, 7, 3, 4, 6, 5, 1]))

"""✔Функция принимает на вход три списка одинаковой длины:
✔ имена str,
✔ ставка int,
✔ премия str с указанием процентов вида «10.25%».
Вернуть словарь с именем в качестве ключа и суммой премии в качестве значения.
Сумма рассчитывается как ставка умноженная на процент премии."""


def my_func3(lst1: list[str], lst2: list[int], lst3: list[str]) -> dict:
    res: dict = {}
    for name, salary, award in zip(lst1, lst2, lst3):
        res[name] = salary * (float(award.replace("%", '')) / 100)
    return res


# print(my_func3(["Иван", "Николай", "Пётр"], [125_000, 96_000, 109_000], ["10.25%", "25%", "13%"]))


"""✔ Функция получает на вход список чисел и два индекса.
✔ Вернуть сумму чисел между между переданными индексами.
✔ Если индекс выходит за пределы списка, сумма считается до конца и/или начала списка."""


def my_func4(lst: list[int], i: int, j: int) -> (int, float):
    print(lst[i:j])
    return sum(lst[i:j])


# print(my_func4([9, 4, 1, 2, 7, 3, 4, 6, 5, 1], 4, 20))


"""✔ Функция получает на вход словарь с названием компании в качестве ключа и списком с доходами и расходами 
(3-10 чисел) в качестве значения.
✔ Вычислите итоговую прибыль или убыток каждой компании. Если все компании прибыльные, верните истину, 
а если хотя бы одна убыточная — ложь."""


def my_func5(company: dict) -> bool:
    if all(map(lambda x: x > 0, company.values())):
        return True
    else:
        return False


company: dict = {
    "Apple": 12_000_000,
    "Google": 9_000_000,
    "AMD": -9_000,
    "Intel": -12_000,
}
# print(my_func5(company))


"""✔ Создайте несколько переменных заканчивающихся и не оканчивающихся на «s».
✔ Напишите функцию, которая при запуске заменяет содержимое переменных
оканчивающихся на s (кроме переменной из одной буквы s) на None.
✔ Значения не удаляются, а помещаются в одноимённые переменные без s на конце."""


def my_func6(*args):
    pass


temp1: str = "qwertys"
temp2: str = "qwerty"
temp3: str = "s"

