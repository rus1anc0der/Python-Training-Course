"""Вспомните какие модули вы уже проходили на курсе.
Создайте файл, в котором вы импортируете встроенные в модуль функции под псевдонимами. (3-7 строк импорта)."""
import random
import sys

# from math import sqrt
# from sys import argv
# import itertools


"""Создайте модуль с функцией внутри. 
Функция принимает на вход три целых числа: нижнюю и верхнюю границу и количество попыток. 
Внутри генерируется случайное число в указанных границах и пользователь должен угадать его за заданное число попыток. 
Функция выводит подсказки “больше” и “меньше”. 
Если число угадано, возвращается истина, а если попытки исчерпаны - ложь."""

"""Улучшаем задачу 2. 
Добавьте возможность запуска функции “угадайки” из модуля в командной строке терминала. 
Строка должна принимать от 1 до 3 аргументов: параметры вызова функции. 
Для преобразования строковых аргументов командной строки в числовые параметры используйте генераторное выражение."""


def guess_the_number(count: int, num_min: int, num_max: int) -> bool:
    rnd: int = random.randint(num_min, num_max)
    result = None
    for i in range(count):
        temp = int(input("Введите загаданное число -> "))
        if temp == rnd:
            return True
        elif temp < rnd:
            print("Загаданное число больше!")
        else:
            print("Загаданное число меньше!")
    return False


user_input: list = [int(i) for i in sys.argv if i.isdigit()]

# print(guess_the_number(user_input[0], user_input[1], user_input[2]))


"""Создайте модуль с функцией внутри. 
Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны."""

"""Добавьте в модуль с загадками функцию, которая хранит словарь списков. 
Ключ словаря - загадка, значение - список с отгадками. 
Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки. """

"""Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) 
и число (номер попытки, с которой она угадана). 
Функция формирует словарь с информацией о результатах отгадывания. 
Для хранения используйте защищённый словарь уровня модуля.
Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря в удобном для чтения виде. 
Для формирования результатов используйте генераторное выражение."""


def riddle(text: str, lst: list, count: int) -> int:
    result: int = 1
    print(f"Загадка - {text}")
    for i in range(count):
        temp = input("Введите ваш вариант: ")
        if temp.lower() in lst:
            return result
        else:
            result += 1
    return 0


def dict_for_riddle():
    dict_riddle: dict = {
        "Зимой и летом одним цветом?": ["ель", "елка", "ёлка"],
        "Два конца, два кольца, Посредине гвоздик?": ["ножницы"],
        "Не огонь, А жжется?": ["крапива"],
    }
    for key, value in dict_riddle.items():
        result_riddle(key, riddle(key, value, 3))


def result_riddle(text: str, count: int):
    list_text: list = [text]
    list_count: list = [count]
    for key, values in zip(list_text, list_count):
        _result_dict[key] = values


def print_result():
    for key, values in _result_dict.items():
        yield key, values


_result_dict: dict = {}
# dict_for_riddle()
# print_result = iter(print_result())
# print(next(print_result))
# print(next(print_result))
# print(next(print_result))


"""Создайте модуль и напишите в нём функцию, которая получает на вход дату в формате DD.MM.YYYY
Функция возвращает истину, если дата может существовать или ложь, если такая дата невозможна.
Для простоты договоримся, что год может быть в диапазоне [1, 9999]. 
Весь период (1 января 1 года - 31 декабря 9999 года) действует Григорианский календарь. 
Проверку года на високосность вынести в отдельную защищённую функцию."""

