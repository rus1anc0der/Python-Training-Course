"""✔ Пользователь вводит строку из четырёх
или более целых чисел, разделённых символом “/”.
Сформируйте словарь, где:
✔второе и третье число являются ключами.
✔первое число является значением для первого ключа.
✔четвертое и все возможные последующие числа хранятся в кортеже как значения второго ключа."""
#
# text = input("Введите строку из четырёх или более целых чисел, разделённых символом “/”\n")
# lst: list = [i for i in text.split('/')]
# if len(lst) > 4:
#     lst[3] = lst[3:]
# result: dict = {lst[1]: lst[0], lst[2]: lst[3]}
# print(result)


"""✔ Самостоятельно сохраните в переменной строку текста.
✔ Создайте из строки словарь, где ключ — буква, а значение — код буквы.
✔ Напишите преобразование в одну строку."""

text: str = 'Самостоятельно сохраните в переменной строку текста'
result: dict = {i: ord(i) for i in text}
# print(result)


"""✔ Продолжаем развивать задачу 2.
✔ Возьмите словарь, который вы получили.
Сохраните его итератор.
✔ Далее выведите первые 5 пар ключ-значение, обращаясь к итератору, а не к словарю."""

iter_result = iter(result.items())
# print(next(iter_result))
# print(next(iter_result))
# print(next(iter_result))
# print(next(iter_result))
# print(next(iter_result))


"""✔ Создайте генератор чётных чисел от нуля до 100.
✔ Из последовательности исключите
числа, сумма цифр которых равна 8.
✔ Решение в одну строку."""

# print(*(i for i in range(0, 100, 2) if sum(int(digit) for digit in str(i)) != 8))


"""✔ Напишите программу, которая выводит на экран числа от 1 до 100.
✔ При этом вместо чисел, кратных трем, программа должна выводить слово «Fizz»
✔ Вместо чисел, кратных пяти — слово «Buzz».
✔ Если число кратно и 3, и 5, то программа
должна выводить слово «FizzBuzz».
✔ *Превратите решение в генераторное выражение."""

result1 = ("Fizz" if i % 3 == 0 else 'Buzz' if i % 5 == 0 else 'FizzBuzz' if i % 3 == 0 and i % 5 == 0 else i for i in
           range(0, 101))
# print(*result1)


"""✔ Выведите в консоль таблицу умножения от 2х2 до 9х10 как на школьной тетрадке.
✔ Таблицу создайте в виде однострочного генератора, где каждый элемент генератора — отдельный пример таблицы умножения.
✔ Для вывода результата используйте «принт» без перехода на новую строку."""

# result3 = iter(f"{i} x {j} = {i * j}" for i in range(2, 10) for j in range(2, 10))
# print(next(result3))
# print(next(result3))
# print(next(result3))
# print(next(result3))


"""✔ Создайте функцию-генератор.
✔ Функция генерирует N простых чисел,
начиная с числа 2.
✔ Для проверки числа на простоту используйте правило: «число является простым, 
если делится нацело только на единицу и на себя»."""


def my_func(value: int):
    for i in range(2, value):
        for j in range(2, i):
            if i % j == 0:
                break
        else:
            yield i


for i in my_func(100):
    print(i)


